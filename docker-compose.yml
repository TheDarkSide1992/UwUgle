services:
  seq:
    image: datalust/seq
    ports:
      - 5341:5341
      - 5342:80
    environment:
      - ACCEPT_EULA=Y

  zipkin:
    image: openzipkin/zipkin
    ports:
      - 9411:9411

  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - apiservice

  apiservice:
    image: searchengine
    build:
      context: .
      dockerfile: Apps/SearchEngine/Dockerfile
    ports:
      - 8000:8000
      - 8081:8001
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      #- DOTNET_USE_POLLING_FILE_WATCHER=1 #This is only nesesarry for files
      - ASPNETCORE_URLS=http://+:8000 #Ths allows us to use swagger On the API
      - pgconn=Host=database;Database=UwUgleDB;User Id=postgres;Password=postgres;Port=5432 #Connection string for DB
    depends_on:
      - database
        
  filecleaner:
    image: filecleaner
    deploy:
      mode: replicated
      replicas: 3
    depends_on:
      - haproxy
    build:
      context: .
      dockerfile: Apps/FileCleaner/Dockerfile
    environment:
      - rabbitmq_connection=host=haproxy;username=application;password=pepsi;timeout=5;publisherConfirms=true;prefetchcount=50;persistentMessages=true;connectIntervalAttempt=5
  
  fileindexer:
    image: fileindexer
    build:
      context: .
      dockerfile: Apps/FileIndexer/Dockerfile
    deploy:
      mode: replicated
      replicas: 3
    depends_on:
      - haproxy
    environment:
      - rabbitmq_connection=host=haproxy;username=application;password=pepsi;timeout=5;publisherConfirms=true;prefetchcount=50;persistentMessages=true;connectIntervalAttempt=5
      - pgconn=Host=database;Database=UwUgleDB;User Id=postgres;Password=postgres;Port=5432

  readerservice:
    image: readerservice
    build:
      context: .
      dockerfile: Apps/FileReader/Dockerfile
    depends_on:
      - haproxy
    environment:
      - DOTNET_USE_POLLING_FILE_WATCHER=1 #This is only nesesarry for files 
      - rabbitmq_connection=host=haproxy;username=application;password=pepsi;timeout=5;publisherConfirms=true;prefetchcount=50;persistentMessages=true;connectIntervalAttempt=5 #Connectionstring for rabbitmq
      - file_folder=${FOLDER} #gets envirement from console eks: FOLDER={Path} docker compose up --build
      #- file_folder=../${FOLDER} #optionaly this might be nesesary
  
  database:
    image: postgres
    command: -c 'max_connections=100'
    ports:
      - "5001:5432"
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./SQL:/SQL #Maops sql folder
      - ./scripts/sql-set-up.sh:/docker-entrypoint-initdb.d/sql-set-up.sh #runs initialisation scrips if  database doss sent exist
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: UwUgleDB
      #remember to make this environmental secrets /|\
      #secret looks like this:
      #Host=localhost\;Database=UwUgleDB\;User Id=postgres\;Password=postgres\;Port=5001


  rabbitmq1:
    image: rabbitmq:management
    container_name: rmq
    hostname: "rmq"
    environment:
      - RABBITMQ_DEFAULT_USER=application
      - RABBITMQ_DEFAULT_PASS=pepsi
      - RABBITMQ_ERLANG_COOKIE=secretcookie
      - RABBITMQ_NODENAME=rabbit@rmq
      - RABBITMQ_USE_LONGNAME="true"
    volumes:
      - rmq_data:/var/lib/rabbitmq
      - ./scripts/rabbitmq-cluster-setup.sh:/usr/local/bin/cluster-entrypoint.sh
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    networks:
      - rabbitmq

  rabbitmq2:
    image: rabbitmq:management
    container_name: rmq2
    hostname: "rmq2"
    depends_on:
      - rabbitmq1
    environment:
      - RABBITMQ_DEFAULT_USER=application
      - RABBITMQ_DEFAULT_PASS=pepsi
      - RABBITMQ_ERLANG_COOKIE=secretcookie
      - RABBITMQ_NODENAME=rabbit@rmq2
      - RABBITMQ_USE_LONGNAME="true"
      - JOIN_CLUSTER_HOST=rmq
    volumes:
      - rmq2_data:/var/lib/rabbitmq
      - ./scripts/rabbitmq-cluster-setup.sh:/usr/local/bin/cluster-entrypoint.sh
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    networks:
      - rabbitmq

  rabbitmq3:
    image: rabbitmq:management
    container_name: rmq3
    hostname: "rmq3"
    depends_on:
      - rabbitmq1
      - rabbitmq2
    environment:
      - RABBITMQ_DEFAULT_USER=application
      - RABBITMQ_DEFAULT_PASS=pepsi
      - RABBITMQ_ERLANG_COOKIE=secretcookie
      - RABBITMQ_NODENAME=rabbit@rmq3
      - RABBITMQ_USE_LONGNAME="true"
      - JOIN_CLUSTER_HOST=rmq
    volumes:
      - rmq3_data:/var/lib/rabbitmq
      - ./scripts/rabbitmq-cluster-setup.sh:/usr/local/bin/rabbitmq-cluster-setup.sh
    entrypoint: /usr/local/bin/rabbitmq-cluster-setup.sh
    networks:
      - rabbitmq
  
  
  haproxy:
    image: haproxy:alpine
    container_name: haproxy
    depends_on:
      - rabbitmq1
      - rabbitmq2
      - rabbitmq3
    networks:
      - rabbitmq
    ports:
      - "5672:5672"    # Expose RabbitMQ AMQP port
      - "15672:15672"  # Expose RabbitMQ Management UI
    volumes:
      - ./Config/Haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg

networks:
  rabbitmq:
    driver: bridge

volumes:
  pgdata:
  rmq_data:
  rmq2_data:
  rmq3_data: